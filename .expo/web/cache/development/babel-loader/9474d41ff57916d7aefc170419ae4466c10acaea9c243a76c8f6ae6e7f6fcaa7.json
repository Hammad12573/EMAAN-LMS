{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, createRef } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { BlurView } from '@react-native-community/blur';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Login = function Login() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    showBlur = _useState2[0],\n    setShowBlur = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    viewRef = _useState4[0],\n    setViewRef = _useState4[1];\n  var _useState5 = useState('light'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    blurType = _useState6[0],\n    setBlurType = _useState6[1];\n  var backgroundImageRef = createRef();\n  var tintColor = ['#ffffff', '#000000'];\n  if (blurType === 'xlight') {\n    tintColor.reverse();\n  }\n  var renderBlurView = function renderBlurView() {\n    return _jsxs(View, {\n      style: {\n        flexDirection: 'column',\n        justifyContent: 'flex-end'\n      },\n      children: [viewRef && _jsx(BlurView, {\n        viewRef: viewRef,\n        style: styles.blurViewStyle,\n        blurRadius: 1,\n        blurType: blurType\n      }), _jsxs(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'flex-end',\n          paddingBottom: 32\n        },\n        children: [_jsx(Text, {\n          style: [styles.textStyle, {\n            color: tintColor[0]\n          }],\n          children: \"Blur component\"\n        }), _jsx(TouchableOpacity, {\n          style: styles.buttonStyle,\n          onPress: function onPress() {\n            setBlurType('xlight');\n          },\n          children: _jsx(Text, {\n            style: [styles.textStyle, {\n              color: tintColor[0]\n            }],\n            children: \"xlight\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.buttonStyle,\n          onPress: function onPress() {\n            setBlurType('light');\n          },\n          children: _jsx(Text, {\n            style: [styles.textStyle, {\n              color: tintColor[0]\n            }],\n            children: \"light\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.buttonStyle,\n          onPress: function onPress() {\n            setBlurType('dark');\n          },\n          children: _jsx(Text, {\n            style: [styles.textStyle, {\n              color: tintColor[0]\n            }],\n            children: \"dark\"\n          })\n        })]\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      source: {\n        uri: 'https://raw.githubusercontent.com/AboutReact/sampleresource/master/site_banner_vertical.png'\n      },\n      style: styles.imageStyle,\n      ref: backgroundImageRef,\n      onLoadEnd: function onLoadEnd() {\n        InteractionManager.runAfterInteractions(function () {\n          setTimeout(function () {\n            setViewRef(findNodeHandle(backgroundImageRef.current));\n          }, 500);\n        });\n      }\n    }), showBlur ? renderBlurView() : null, _jsxs(View, {\n      style: styles.blurToggleStyle,\n      children: [_jsx(Text, {\n        style: [styles.textStyle, {\n          color: tintColor[0]\n        }],\n        children: \"Show Blur Background\"\n      }), _jsx(Text, {\n        style: [styles.textStyle, {\n          color: tintColor[0]\n        }],\n        children: showBlur ? 'Yes' : 'No'\n      }), _jsx(Switch, {\n        onValueChange: function onValueChange(value) {\n          return setShowBlur(value);\n        },\n        value: showBlur\n      })]\n    })]\n  });\n};\nexport default Login;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  imageStyle: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n    resizeMode: 'cover',\n    width: null,\n    height: null\n  },\n  blurViewStyle: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0\n  },\n  textStyle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    margin: 10,\n    color: '#d0d0d0'\n  },\n  blurToggleStyle: {\n    position: 'absolute',\n    top: 30,\n    alignItems: 'center'\n  },\n  buttonStyle: {\n    alignItems: 'center',\n    backgroundColor: 'lightgreen',\n    width: 300,\n    marginLeft: 100,\n    marginRight: 100,\n    marginTop: 16\n  }\n});","map":{"version":3,"names":["React","useState","createRef","Image","InteractionManager","StyleSheet","Switch","Text","View","TouchableOpacity","findNodeHandle","BlurView","jsx","_jsx","jsxs","_jsxs","Login","_useState","_useState2","_slicedToArray","showBlur","setShowBlur","_useState3","_useState4","viewRef","setViewRef","_useState5","_useState6","blurType","setBlurType","backgroundImageRef","tintColor","reverse","renderBlurView","style","flexDirection","justifyContent","children","styles","blurViewStyle","blurRadius","flex","paddingBottom","textStyle","color","buttonStyle","onPress","container","source","uri","imageStyle","ref","onLoadEnd","runAfterInteractions","setTimeout","current","blurToggleStyle","onValueChange","value","create","alignItems","backgroundColor","position","left","top","bottom","right","resizeMode","width","height","fontSize","fontWeight","textAlign","margin","marginLeft","marginRight","marginTop"],"sources":["F:/LMS/LMS/components/Login.js"],"sourcesContent":["import React, {useState, createRef} from 'react';\r\n\r\n// import all the components we are going to use\r\nimport {\r\n  Image,\r\n  InteractionManager,\r\n  StyleSheet,\r\n  Switch,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  findNodeHandle,\r\n} from 'react-native';\r\n\r\n//import BlurView to make the Blur Background\r\nimport {BlurView} from '@react-native-community/blur';\r\n\r\nconst Login = () => {\r\n  const [showBlur, setShowBlur] = useState(true);\r\n  const [viewRef, setViewRef] = useState(null);\r\n  const [blurType, setBlurType] = useState('light');\r\n  const backgroundImageRef = createRef();\r\n\r\n  const tintColor = ['#ffffff', '#000000'];\r\n  if (blurType === 'xlight') {\r\n    tintColor.reverse();\r\n  }\r\n\r\n  const renderBlurView = () => {\r\n    //Function for the blur background\r\n    return (\r\n      <View\r\n        style={{\r\n          flexDirection: 'column',\r\n          justifyContent: 'flex-end'\r\n        }}>\r\n        {viewRef && (\r\n          <BlurView\r\n            viewRef={viewRef}\r\n            style={styles.blurViewStyle}\r\n            blurRadius={1}\r\n            blurType={blurType}\r\n            // Additional available on Android\r\n            // blurRadius={20}\r\n            // downsampleFactor={10}\r\n            // overlayColor={'rgba(0, 0, 255, .6)'}\r\n          />\r\n        )}\r\n        <View\r\n          style={{\r\n            flex: 1,\r\n            flexDirection: 'column',\r\n            justifyContent: 'flex-end',\r\n            paddingBottom: 32,\r\n          }}>\r\n          <Text\r\n            style={[\r\n              styles.textStyle,\r\n              {color: tintColor[0]\r\n            }]}>\r\n              Blur component\r\n          </Text>\r\n          <TouchableOpacity\r\n            style={styles.buttonStyle}\r\n            onPress={() => {\r\n              //To make extra light background\r\n              setBlurType('xlight');\r\n            }}>\r\n            <Text\r\n              style={[\r\n                styles.textStyle,\r\n                {color: tintColor[0]}\r\n              ]}>\r\n                xlight\r\n            </Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity\r\n            style={styles.buttonStyle}\r\n            onPress={() => {\r\n              //To make light background\r\n              setBlurType('light');\r\n            }}>\r\n            <Text\r\n              style={[\r\n                styles.textStyle,\r\n               {color: tintColor[0]}\r\n              ]}>\r\n                light\r\n            </Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity\r\n            style={styles.buttonStyle}\r\n            onPress={() => {\r\n              //To make dark light background\r\n              setBlurType('dark');\r\n            }}>\r\n            <Text\r\n              style={[\r\n                styles.textStyle,\r\n                {color: tintColor[0]}\r\n              ]}>\r\n                dark\r\n            </Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Image\r\n        source={{\r\n          uri:\r\n            'https://raw.githubusercontent.com/AboutReact/sampleresource/master/site_banner_vertical.png',\r\n        }}\r\n        //source={require('./bgimage.jpg')}\r\n        style={styles.imageStyle}\r\n        ref={backgroundImageRef}\r\n        onLoadEnd={() => {\r\n          // Workaround for a tricky race condition on initial load\r\n          InteractionManager.runAfterInteractions(() => {\r\n            setTimeout(() => {\r\n              setViewRef(\r\n                findNodeHandle(backgroundImageRef.current)\r\n              );\r\n            }, 500);\r\n          });\r\n        }}\r\n      />\r\n      {showBlur ? renderBlurView() : null}\r\n      <View style={styles.blurToggleStyle}>\r\n        <Text\r\n          style={[\r\n            styles.textStyle,\r\n            {color: tintColor[0]}\r\n          ]}>\r\n            Show Blur Background\r\n        </Text>\r\n        <Text\r\n          style={[\r\n            styles.textStyle,\r\n            {color: tintColor[0]}\r\n          ]}>\r\n            {showBlur ? 'Yes' : 'No'}\r\n        </Text>\r\n        <Switch\r\n          onValueChange={\r\n            (value) => setShowBlur(value)\r\n          }\r\n          value={showBlur}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#F5FCFF',\r\n  },\r\n  imageStyle: {\r\n    position: 'absolute',\r\n    left: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n    resizeMode: 'cover',\r\n    width: null,\r\n    height: null,\r\n  },\r\n  blurViewStyle: {\r\n    position: 'absolute',\r\n    left: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n  },\r\n  textStyle: {\r\n    fontSize: 22,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    margin: 10,\r\n    color: '#d0d0d0',\r\n  },\r\n  blurToggleStyle: {\r\n    position: 'absolute',\r\n    top: 30,\r\n    alignItems: 'center',\r\n  },\r\n  buttonStyle: {\r\n    alignItems: 'center',\r\n    backgroundColor: 'lightgreen',\r\n    width: 300,\r\n    marginLeft: 100,\r\n    marginRight: 100,\r\n    marginTop: 16,\r\n  },\r\n});"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAC,OAAAC,KAAA;AAAA,OAAAC,kBAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,cAAA;AAejD,SAAQC,QAAQ,QAAO,8BAA8B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEtD,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;EAClB,IAAAC,SAAA,GAAgChB,QAAQ,CAAC,IAAI,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5B,IAAAI,UAAA,GAA8BrB,QAAQ,CAAC,IAAI,CAAC;IAAAsB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,OAAO,GAAAD,UAAA;IAAEE,UAAU,GAAAF,UAAA;EAC1B,IAAAG,UAAA,GAAgCzB,QAAQ,CAAC,OAAO,CAAC;IAAA0B,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA1CE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAMG,kBAAkB,GAAG5B,SAAS,EAAE;EAEtC,IAAM6B,SAAS,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC;EACxC,IAAIH,QAAQ,KAAK,QAAQ,EAAE;IACzBG,SAAS,CAACC,OAAO,EAAE;EACrB;EAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IAE3B,OACElB,KAAA,CAACP,IAAI;MACH0B,KAAK,EAAE;QACLC,aAAa,EAAE,QAAQ;QACvBC,cAAc,EAAE;MAClB,CAAE;MAAAC,QAAA,GACDb,OAAO,IACNX,IAAA,CAACF,QAAQ;QACPa,OAAO,EAAEA,OAAQ;QACjBU,KAAK,EAAEI,MAAM,CAACC,aAAc;QAC5BC,UAAU,EAAE,CAAE;QACdZ,QAAQ,EAAEA;MAAS,EAMtB,EACDb,KAAA,CAACP,IAAI;QACH0B,KAAK,EAAE;UACLO,IAAI,EAAE,CAAC;UACPN,aAAa,EAAE,QAAQ;UACvBC,cAAc,EAAE,UAAU;UAC1BM,aAAa,EAAE;QACjB,CAAE;QAAAL,QAAA,GACFxB,IAAA,CAACN,IAAI;UACH2B,KAAK,EAAE,CACLI,MAAM,CAACK,SAAS,EAChB;YAACC,KAAK,EAAEb,SAAS,CAAC,CAAC;UACrB,CAAC,CAAE;UAAAM,QAAA,EAAC;QAEN,EAAO,EACPxB,IAAA,CAACJ,gBAAgB;UACfyB,KAAK,EAAEI,MAAM,CAACO,WAAY;UAC1BC,OAAO,EAAE,SAAAA,QAAA,EAAM;YAEbjB,WAAW,CAAC,QAAQ,CAAC;UACvB,CAAE;UAAAQ,QAAA,EACFxB,IAAA,CAACN,IAAI;YACH2B,KAAK,EAAE,CACLI,MAAM,CAACK,SAAS,EAChB;cAACC,KAAK,EAAEb,SAAS,CAAC,CAAC;YAAC,CAAC,CACrB;YAAAM,QAAA,EAAC;UAEL;QAAO,EACU,EACnBxB,IAAA,CAACJ,gBAAgB;UACfyB,KAAK,EAAEI,MAAM,CAACO,WAAY;UAC1BC,OAAO,EAAE,SAAAA,QAAA,EAAM;YAEbjB,WAAW,CAAC,OAAO,CAAC;UACtB,CAAE;UAAAQ,QAAA,EACFxB,IAAA,CAACN,IAAI;YACH2B,KAAK,EAAE,CACLI,MAAM,CAACK,SAAS,EACjB;cAACC,KAAK,EAAEb,SAAS,CAAC,CAAC;YAAC,CAAC,CACpB;YAAAM,QAAA,EAAC;UAEL;QAAO,EACU,EACnBxB,IAAA,CAACJ,gBAAgB;UACfyB,KAAK,EAAEI,MAAM,CAACO,WAAY;UAC1BC,OAAO,EAAE,SAAAA,QAAA,EAAM;YAEbjB,WAAW,CAAC,MAAM,CAAC;UACrB,CAAE;UAAAQ,QAAA,EACFxB,IAAA,CAACN,IAAI;YACH2B,KAAK,EAAE,CACLI,MAAM,CAACK,SAAS,EAChB;cAACC,KAAK,EAAEb,SAAS,CAAC,CAAC;YAAC,CAAC,CACrB;YAAAM,QAAA,EAAC;UAEL;QAAO,EACU;MAAA,EACd;IAAA,EACF;EAEX,CAAC;EAED,OACEtB,KAAA,CAACP,IAAI;IAAC0B,KAAK,EAAEI,MAAM,CAACS,SAAU;IAAAV,QAAA,GAC5BxB,IAAA,CAACV,KAAK;MACJ6C,MAAM,EAAE;QACNC,GAAG,EACD;MACJ,CAAE;MAEFf,KAAK,EAAEI,MAAM,CAACY,UAAW;MACzBC,GAAG,EAAErB,kBAAmB;MACxBsB,SAAS,EAAE,SAAAA,UAAA,EAAM;QAEfhD,kBAAkB,CAACiD,oBAAoB,CAAC,YAAM;UAC5CC,UAAU,CAAC,YAAM;YACf7B,UAAU,CACRf,cAAc,CAACoB,kBAAkB,CAACyB,OAAO,CAAC,CAC3C;UACH,CAAC,EAAE,GAAG,CAAC;QACT,CAAC,CAAC;MACJ;IAAE,EACF,EACDnC,QAAQ,GAAGa,cAAc,EAAE,GAAG,IAAI,EACnClB,KAAA,CAACP,IAAI;MAAC0B,KAAK,EAAEI,MAAM,CAACkB,eAAgB;MAAAnB,QAAA,GAClCxB,IAAA,CAACN,IAAI;QACH2B,KAAK,EAAE,CACLI,MAAM,CAACK,SAAS,EAChB;UAACC,KAAK,EAAEb,SAAS,CAAC,CAAC;QAAC,CAAC,CACrB;QAAAM,QAAA,EAAC;MAEL,EAAO,EACPxB,IAAA,CAACN,IAAI;QACH2B,KAAK,EAAE,CACLI,MAAM,CAACK,SAAS,EAChB;UAACC,KAAK,EAAEb,SAAS,CAAC,CAAC;QAAC,CAAC,CACrB;QAAAM,QAAA,EACCjB,QAAQ,GAAG,KAAK,GAAG;MAAI,EACrB,EACPP,IAAA,CAACP,MAAM;QACLmD,aAAa,EACX,SAAAA,cAACC,KAAK;UAAA,OAAKrC,WAAW,CAACqC,KAAK,CAAC;QAAA,CAC9B;QACDA,KAAK,EAAEtC;MAAS,EAChB;IAAA,EACG;EAAA,EACF;AAEX,CAAC;AAED,eAAeJ,KAAK;AAEpB,IAAMsB,MAAM,GAAGjC,UAAU,CAACsD,MAAM,CAAC;EAC/BZ,SAAS,EAAE;IACTN,IAAI,EAAE,CAAC;IACPL,cAAc,EAAE,QAAQ;IACxBwB,UAAU,EAAE,QAAQ;IACpBC,eAAe,EAAE;EACnB,CAAC;EACDX,UAAU,EAAE;IACVY,QAAQ,EAAE,UAAU;IACpBC,IAAI,EAAE,CAAC;IACPC,GAAG,EAAE,CAAC;IACNC,MAAM,EAAE,CAAC;IACTC,KAAK,EAAE,CAAC;IACRC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE;EACV,CAAC;EACD9B,aAAa,EAAE;IACbuB,QAAQ,EAAE,UAAU;IACpBC,IAAI,EAAE,CAAC;IACPC,GAAG,EAAE,CAAC;IACNC,MAAM,EAAE,CAAC;IACTC,KAAK,EAAE;EACT,CAAC;EACDvB,SAAS,EAAE;IACT2B,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,QAAQ;IACnBC,MAAM,EAAE,EAAE;IACV7B,KAAK,EAAE;EACT,CAAC;EACDY,eAAe,EAAE;IACfM,QAAQ,EAAE,UAAU;IACpBE,GAAG,EAAE,EAAE;IACPJ,UAAU,EAAE;EACd,CAAC;EACDf,WAAW,EAAE;IACXe,UAAU,EAAE,QAAQ;IACpBC,eAAe,EAAE,YAAY;IAC7BO,KAAK,EAAE,GAAG;IACVM,UAAU,EAAE,GAAG;IACfC,WAAW,EAAE,GAAG;IAChBC,SAAS,EAAE;EACb;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}